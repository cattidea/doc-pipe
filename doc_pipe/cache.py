from __future__ import annotations

import hashlib
from pathlib import Path

CACHE_DIR = Path(".doc-pipe_cache")


def _calc_md5(content: str) -> str:
    return hashlib.md5(content.encode("utf-8")).hexdigest()


def _create_dot_gitignore() -> None:
    gitignore_path = CACHE_DIR / ".gitignore"
    contents = ""
    contents += "# Auto generated by doc-pipe\n"
    contents += "*\n"
    gitignore_path.write_text(contents, encoding="utf-8")


def create_cache_dir() -> None:
    CACHE_DIR.mkdir(exist_ok=True)
    _create_dot_gitignore()


def clear_cache_dir() -> None:
    # TODO
    ...


def write_to_cache(content: str) -> Path:
    path = CACHE_DIR / _calc_md5(content)
    # Currently, cached file may be updated by formatter,
    # so we can't cache it.
    # if path.exists():
    #     return path
    path.parent.mkdir(parents=True, exist_ok=True)
    path.write_text(content, encoding="utf-8")
    return path


def read_from_cache(path: Path) -> str:
    return path.read_text(encoding="utf-8")
